


pub struct Point {
    x: i64,
    y: i64,
    a: i64,
    b: i64,
}

impl Point {
    pub fn new(&mut self,x:i64, y:i64, a: i64, b: i64) -> Result<Point, String> {
       self.a= a;
       self.b= b;
       self.x= x;
       self.b= b;
    
       //주어진 점이 곡선위에 있는지 검사합니다.
       if self.y.pow(2) !=self.x.pow(3)+a*x+b{
        return Err(format!("({}, {}) is not on the curve", x, y));

       }
       Ok(Point { x,y,a,b })
       
    }
    //두점은 같은 곡선위에 잇고 그 좌표값이 동일해야만 하다고 판정
    pub fn eq(self,other:Point)->bool{
        return self.x==other.x && self.y==other.y && self.a==other.a &&  self.b==other.b
    }
}
pub fn main(){
    /*
    타원 곡선은 다음과 같은 식으로 나타냅니다

    y^2 = x^3+ax+b
    
    1차방정식에서 
    y= mx+b라는 방정식이 있습니다.
    여기서 m은 기울기 이고 b는 y의 절편입니다.

   
    (그래프)

    2차방정식은 
    y= ax^2 +bx+c

    (그래프)
    

    3차방정식
    y= ax^3+bx^2+cx+d

    (그래프)
     
    타원곡선도 이와 비슷합니다
        y^2 = x^3+ax+b


     
    타원 곡선과 3차방정식곡선의 기본적인 차이는 왼쪽의 y2 항입니다
    그림과 같이 y2항으로 인해 그래프가 x축에 대칭이 됩니다.

     (그래프)

    타원곡선은 3차곡선보다 기울기가 완만한데 이또한 y2항 떄문입니다.
    계숫값에 따라서 곡선이 분리될수도 있습니다.

     (그래프)
    
    타원곡선은 3차방정식 그래프에서 y>0인 부분에 대해 곡선을 완만하게 하여 그림과 같은 그래프를 만든 후 y>0인 부분에 대해 x축에 대칭이 되도록 만든 그래프라 생각이 가능합니다.


     (그래프)
      (그래프)
       (그래프)

    비트코인에서는 secp2541k이라고 하며다음과 같은 그림이 될수 잇습니다.
    x2= x3+7
    일반정규식은
    y^2= x^3+ax+b
    즉 계숫값이 a= 0,b=7인 곡선으로 정의가 됩니다.

     (그래프)
     */

  
      /*두점의 덧셈
       타원 곡선은 두점의 덧셈을 정의하는데 매우 유용합니다.점덧셈은 곡선위의 두점에 대해 어떤 연산을 거쳐 곡선에 존재하는 제3의 점을  얻는 과정입니다.
       이과정은 일반적은 덧셈연산과 여러 공통점이 잇기 떄문에 이를 점과 점의 덧셈 이라고 합니다.
       점덧셈은 교환법칙이 성립합니다.
       A+B= B+A
       모든 타원곡선에 대해 몇가지 예외 경우를 제외하고 곡선과 함꼐 그려진 직선은 반드시 곡선과 한점또는 세점에서 만납니다.

            (그래프)
       (그래프)

       두가지 예외 사항은 직선이 y축과 평행한 직선인 경우 와 곡선이 한점에 접하는 접선인 경우입니다.
                   (그래프)
       (그래프)

       타원곡선에서 점 덧셈은 다음과 같이 정의합니다.
       두점 A와 B를 지나는 직선이 타원과 만나는 교점을 x축으로 대칭시킨 점을 A+B로 정의합니다.
       직선이 타원곡선과 한점에서 만나는 경우는 것셈을 정의할수 없습니다.
       타원 곡선위의 두점 A,B애 대해 A+B를 다음과 같이 구현합니다.
       - 두점 A와 B를 지나가는 직선이 타원곡선과 새롭게 만나는 점 C를 찾습니다.
       - 그 점과 X축에 대해 대칭인 점이 뎃셈의 결과 A+B입니다.
       
           (그래프)

        점 덧셈의 결과를 쉽게 예측할수 없다는 것이 중요한 성질 중 하나입니다.
        공식을 통해 점 덧셈을 쉽게 계산할수 잇지만 직관적으로 점 덧셈의 결과점은 곡선 위 어느 위치든지 가능합니다.
        A+B는  두점의 오른쪽에 있고 A+C는 x축 기준으로 A와  C사이에 있고 B+C는 두점 왼쪽에 위치하고 있습니다.수학용어로 점 덧셈은 비선형 연산이라고 합니다.

       */
       /*점덧셈 성질 
         점 덧셈은 일반덧셈 연산과 유사한 몇가지 성질을 만족합니다.
         - 항등원 존재
         - 교환법칙 성립
         - 결합법칙 성립
         - 역원 존재
         여기서 항등원은 대수의 0과 같은 의미의 점이 존재한다는 뜻입니다.
         즉 곡선에 I라는 점이 존재해서 A라는 점과 더한 결과는 역시 A가됩니다.
         I+A= A

         이점을 무한원점 이라고 부릅니다.

         이는 것셈에 대한 역원과 관련있습니다.어떤 A라는 점에 대해 -A라는 점이 존재하고 그 합은 항등원이 된다는것입니다.

         A+(-A)= I

         그래프로 보면 이점들은 축에 수직이 직선과 곡선의 교점들입니다.

         (그래프)

         그래프를 보면 무한원점이라는 이유를 알수있습니다.
         x축에 수직인 직선과 타원곡선이 만나는 세번쨰 점은 어디에 있는지 생각할수 있습니다.
         
         교환법칙은 연산 순서를 바꿔도 결과가 같다는 점입니다
         A+B=B+A

       그래프를 보면   A와 B를 지나는 직선은 순서를 바꿔도 동일한 위치에서 곡선과 만나기 때문에 교환법칙이 성립하는 것은 분명합니다.

       결합법칙은 3개 이상의 덧셈에서 어느 두항을 먼저 더해도 결과는 동일하다는 뜻입니다.
       이를 테면(A+B)+C= A+(B+C)입니다.
       그래프를보면 x축으로 수선이 왔다 갔다하면서 직관적으로 바로 이해되지는 않습니다.
       
       */
    /*점덧셈 코딩 */
                  /* x!=x인경우 점 덧셈 코딩하기*/

            /*p= p인 경우의 점 */

            /*p= p인 경우의 점 덧셈 코딩 */

      /*예외 처리 코딩 */

}