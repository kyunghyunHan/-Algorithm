fn max_profit(M: usize, n: usize, p: &[usize], w: &[usize]) -> usize {
    let mut dp = vec![vec![0; M + 1]; n + 1];

    for i in 1..=n {
        for j in 1..=M {
            if w[i - 1] <= j {
                dp[i][j] = dp[i - 1][j].max(dp[i - 1][j - w[i - 1]] + p[i - 1]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    dp[n][M]
}

pub fn main() {
    let M = 10;
    let n = 4;
    let p = vec![18, 20, 9, 25];
    let w = vec![5, 4,3,4];
    
    println!( "{}",max_profit(M,n,&p,&w))
}
/*

주어진 문제에서는 물체를 10으로 쪼갤 수 있으며, 물체의 개수는 4개입니다. 각 물체의 이익과 무게는 다음과 같습니다:

이익 (p1, p2, p3, p4) = (18, 20, 9, 25)
무게 (w1, w2, w3, w4) = (5, 4, 3, 4)
먼저, 각 물체의 단위 무게당 이익을 계산합니다. 이는 물체의 이익을 무게로 나눈 값입니다. 단위 무게당 이익을 계산하면 다음과 같습니다:

단위 무게당 이익 (pp1, pp2, pp3, pp4) = (18/5, 20/4, 9/3, 25/4) = (3.6, 5, 3, 6.25)
이제 욕심쟁이 방법을 적용하여 최대 이익을 구할 수 있습니다. 욕심쟁이 방법은 각 단계에서 가장 큰 단위 무게당 이익을 갖는 물체를 선택하는 것입니다. 따라서 다음과 같은 과정을 수행합니다:

단위 무게당 이익을 내림차순으로 정렬합니다.

 (6.25,5, 3.6, 3)
물체를 선택하여 배당합니다. 선택된 물체는 배낭에 넣고, 선택되지 않은 물체는 배낭에 넣지 않습니다. 선택된 물체의 무게와 이익을 더합니다.

선택된 물체: (p2, p4) = (20, 25)
선택된 물체의 무게: (w2, w4) = (4, 4)
선택된 물체의 이익: (20, 25)
선택된 물체의 무게와 이익을 합산합니다.

선택된 물체의 무게 합: 4 + 4 = 8
선택된 물체의 이익 합: 20 + 25 = 45
따라서, 주어진 조건에 따라 욕심쟁이 방법을 적용하여 최대 이익을 구하면, 최대 이익은 45가 됩니다.
 */